{"version":3,"sources":["webpack:///./src/app/user/login.component.html","webpack:///./src/app/user/login.component.ts","webpack:///./src/app/user/profile.component.html","webpack:///./src/app/user/profile.component.ts","webpack:///./src/app/user/user.module.ts","webpack:///./src/app/user/user.routes.ts"],"names":[],"mappings":"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","file":"0.js","sourcesContent":["module.exports = \"<h1>Login</h1>\\r\\n<hr>\\r\\n<div class=\\\"col-md-4\\\">\\r\\n  <form #loginForm='ngForm' (ngSubmit)='login(loginForm.value)' autocomplete=\\\"off\\\" novalidate>\\r\\n    <div class=\\\"form-group\\\" >\\r\\n      <label for=\\\"userName\\\">User Name:</label>\\r\\n      <em *ngIf='loginForm.controls.userName?.invalid && (loginForm.controls.userName?.touched || mouseoverLogin)'>Required</em>\\r\\n      <input (ngModel)='userName' name='userName' required id=\\\"userName\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"User Name...\\\" />\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" >\\r\\n      <label for=\\\"password\\\">Password:</label>\\r\\n      <em *ngIf='loginForm.controls.password?.invalid && (loginForm.controls.password?.touched || mouseoverLogin)'>Required</em>\\r\\n      <input (ngModel)='password' name='password' required id=\\\"password\\\" type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Password...\\\" />\\r\\n    </div>\\r\\n     \\r\\n    <span (mouseenter)='mouseoverLogin=true' (mouseleave)='mouseoverLogin=false'>\\r\\n    <button type=\\\"submit\\\" [disabled]='loginForm.invalid' class=\\\"btn btn-primary\\\">Login</button>\\r\\n    </span>\\r\\n    <button type=\\\"button\\\" (click)='cancel()' class=\\\"btn btn-default\\\">Cancel</button>\\r\\n  </form>\\r\\n  <br>\\r\\n  <div *ngIf='loginInvalid' class='alert alert-danger'>Invalid Login Info</div>\\r\\n</div>\"","import { Component } from '@angular/core'\r\nimport { AuthService } from './auth.service'\r\nimport { Router } from '@angular/router'\r\n\r\n@Component({\r\n    templateUrl: './login.component.html',\r\n    styles: [`\r\n        em { float:right; color: #E05C65; padding-left: 10px; }\r\n    `]\r\n})\r\n\r\nexport class LoginComponent{\r\n    constructor(private authService: AuthService, private router: Router){\r\n\r\n    }\r\n\r\n    username\r\n    password\r\n    mouseoverLogin\r\n    loginInvalid = false\r\n\r\n    login(formValues){\r\n        this.authService.loginUser(formValues.userName, formValues.password)\r\n        .subscribe(res => {\r\n            if(!res){\r\n                this.loginInvalid = true\r\n            } else {\r\n                this.router.navigate(['events'])\r\n            }\r\n        })\r\n    }\r\n\r\n    cancel() {\r\n        this.router.navigate(['events'])\r\n    }\r\n\r\n}","module.exports = \"<div>\\r\\n    <h1>Edit Your Profile </h1>\\r\\n    <hr>\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n      <form [formGroup]='profileForm' (ngSubmit)='saveProfile(profileForm.value)' autocomplete=\\\"off\\\" novalidate>\\r\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'error' : !validateFirstName() }\\\">\\r\\n          <label for=\\\"firstName\\\">First Name:</label>\\r\\n          <em *ngIf='!validateFirstName() && profileForm.controls.firstName.errors.required'>Required</em>\\r\\n          <em *ngIf='!validateFirstName() && profileForm.controls.firstName.errors.pattern'>Must start with a letter</em>\\r\\n          <input formControlName='firstName' id=\\\"firstName\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"First Name...\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\" [ngClass]=\\\"{'error' : !validateLastName() }\\\">\\r\\n          <label for=\\\"lastName\\\">Last Name:</label>\\r\\n          <em *ngIf='!validateLastName()'>Required</em>\\r\\n          <input formControlName='lastName' id=\\\"lastName\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Last Name...\\\" />\\r\\n        </div>\\r\\n  \\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n        <button (click)='cancel()' type=\\\"button\\\" class=\\\"btn btn-default\\\">Cancel</button>\\r\\n        <button (click)='logout()' type=\\\"button\\\" class=\\\"btn btn-warning\\\" style='float:right'>Logout</button>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\"","import { Component, OnInit, Inject } from '@angular/core'\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms'\r\nimport { AuthService } from './auth.service'\r\nimport { Router } from '@angular/router'\r\nimport { TOASTR_TOKEN, Toastr } from '../common/toastr.service'\r\n\r\n\r\n@Component({\r\n  templateUrl: './profile.component.html',\r\n  styles: [`\r\n    em {float:right; color:#E05C65; padding-left:10px;}\r\n    .error input {background-color:#E3C3C5;}\r\n    .error ::-webkit-input-placeholder {color: #999; }\r\n    .error ::-moz-placeholder {color: #999; }\r\n    .error :-moz-placeholder {color: #999; }\r\n    .error ::ms-input-placeholder {color: #999; }\r\n  `]\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  constructor(private authService: AuthService, \r\n    private router: Router,\r\n    @Inject(TOASTR_TOKEN) private toastr: Toastr){\r\n\r\n  }\r\n\r\n  profileForm:FormGroup\r\n  private firstName:FormControl\r\n  private lastName:FormControl\r\n       \r\n  ngOnInit(){\r\n    this.firstName = new FormControl(this.authService.currentUser.firstName, \r\n      [Validators.required, Validators.pattern('[a-zA-Z].*')])\r\n    this.lastName = new FormControl(this.authService.currentUser.lastName, Validators.required)\r\n    this.profileForm = new FormGroup({\r\n      firstName: this.firstName,\r\n      lastName: this.lastName\r\n    })\r\n  }\r\n\r\n  cancel(){\r\n    this.router.navigate(['events'])\r\n  }\r\n\r\n  saveProfile(formValues){\r\n    if(this.profileForm.valid){\r\n      this.authService.updateCurrentUser(formValues.firstName, formValues.lastName)\r\n      .subscribe(() => {\r\n        this.toastr.success('Profile Saved')\r\n      })     \r\n    }\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout()\r\n    .subscribe(() => {\r\n      this.router.navigate(['/user/login'])\r\n    })\r\n  }\r\n\r\n  validateFirstName() {\r\n    return this.firstName.valid || this.firstName.untouched\r\n  }\r\n  \r\n  \r\n  validateLastName() {\r\n    return this.lastName.valid || this.lastName.untouched\r\n  }\r\n  \r\n}","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { RouterModule } from '@angular/router'\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\r\nimport { userRoutes } from './user.routes'\r\nimport { ProfileComponent } from './profile.component'\r\nimport { LoginComponent } from './login.component'\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(userRoutes)\r\n  ],\r\n  declarations: [\r\n    ProfileComponent,\r\n    LoginComponent\r\n  ],\r\n  providers: [\r\n\r\n  ]\r\n})\r\nexport class UserModule { }","import { ProfileComponent } from './profile.component'\r\nimport { LoginComponent } from './login.component'\r\n\r\nexport const userRoutes = [\r\n  {path: 'profile', component: ProfileComponent},\r\n  {path: 'login', component: LoginComponent}\r\n]"],"sourceRoot":""}